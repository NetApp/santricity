- name: Discover storage systems
  block:
    - name: Discover storage systems
      na_santricity_discover:
        proxy_url: "{{ item['key'] }}"
        proxy_username: "{{ item['value']['proxy_username'] }}"
        proxy_password: "{{ item['value']['proxy_password'] }}"
        proxy_validate_certs: "{{ item['value']['proxy_validate_certs'] | default(omit) }}"
        subnet_mask: "{{ eseries_proxy_discovery_subnet }}"
      run_once: true
      delegate_facts: true
      register: discovered_systems
      loop: "{{ lookup('dict', proxy_systems, wantlist=True) }}"
      vars:
        proxy_systems: |-
          {#- Build a dictionary of all inventoried proxies keyed by their api url #}
          {%- set systems = {} %}
          {%- for array in ansible_play_hosts_all %}
            {%- if "eseries_proxy_api_url" in hostvars[array] and "eseries_proxy_api_username" in hostvars[array] and hostvars[array]["eseries_proxy_api_username"] == "admin" and "eseries_proxy_api_password" in hostvars[array] %}
              {%- if systems.update({hostvars[array]["eseries_proxy_api_url"]: {
                "proxy_username": hostvars[array]["eseries_proxy_api_username"],
                "proxy_password": hostvars[array]["eseries_proxy_api_password"],
                "current_proxy_password": hostvars[array]["eseries_proxy_current_api_password"] | default(omit),
                "proxy_default_password": hostvars[array]["eseries_proxy_default_system_password"] | default(omit),
                "proxy_validate_certs": hostvars[array]["eseries_proxy_api_validate_certs"]}}) %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ systems }}

    - name: Determine storage system Web Services Embedded REST API urls
      set_fact:
        current_eseries_api_info: |-
          {% set info = {} %}
          {%- for serial in (item["systems_found"].keys() | list) %}
            {%- if serial == eseries_serial and info.update(item["systems_found"][serial]) %}{%- endif %}
          {%- endfor %}
          {{ info }}
      delegate_facts: false
      loop: "{{ discovered_systems['results'] }}"

    - name: Set storage systems facts
      set_fact:
        current_eseries_api_url: "{{ current_eseries_api_info['api_urls'][0] }}"
        current_eseries_api_url_backup_list: "{{ current_eseries_api_info['api_urls'][1:] | default([]) }}"
        current_eseries_api_is_proxy: "{{ current_eseries_api_info['proxy_required'] }}"
      when: current_eseries_api_info is defined
    - name: Set storage systems credentials
      set_fact:
        current_eseries_ssid: "{%- if current_eseries_api_is_proxy %}{{ eseries_ssid | default(eseries_serial) }}{%- else %}1{%- endif %}"
        current_eseries_api_username: "{%- if current_eseries_api_is_proxy %}{{ eseries_proxy_api_username}}{%- else %}{{ eseries_api_username }}{%- endif %}"
        current_eseries_api_password: "{%- if current_eseries_api_is_proxy %}{{ eseries_proxy_api_password }}{%- else %}{{ eseries_api_password }}{%- endif %}"
        current_eseries_validate_certs: "{%- if current_eseries_api_is_proxy %}{{ eseries_proxy_api_validate_certs }}{%- else %}{{ eseries_validate_certs }}{%- endif %}"
      when: current_eseries_api_info is defined
  when: eseries_serial is defined and eseries_serial and eseries_proxy_discovery_subnet is defined and eseries_proxy_discovery_subnet

# When discovery fails, attempt discovery from inventory information.
- name: Build url list based on provided management IP address(es).
  block:
    - name: Compile Web Services REST API backup urls.
      set_fact:
        eseries_api_url_backup_list: |-
          {%- set urls = [] %}
          {%- set url_info = eseries_api_url | urlsplit %}
          {%- for address in [eseries_management_interfaces["controller_a"][0]["address"] | default(""),
                              eseries_management_interfaces["controller_a"][1]["address"] | default(""),
                              eseries_management_interfaces["controller_b"][0]["address"] | default(""),
                              eseries_management_interfaces["controller_b"][1]["address"] | default("")] %}
            {%- if address != "" and urls.append([url_info["scheme"], "://", address, ":", url_info["port"], url_info["path"]] | join("")) %}{%- endif %}
          {%- endfor %}
          {%- set backup_urls = [] %}
          {%- for url in urls %}
            {%- if url != eseries_api_url and backup_urls.append(url) %}{%- endif %}
          {%- endfor %}
          {{ backup_urls }}
    - name: Collect storage system facts
      uri:
        url: "{{ eseries_api_url | regex_replace('v2', 'utils/about') }}"
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
        validate_certs: false
      register: about
    - name: Determine whether SANtricity Web Services REST API is proxy and information
      set_fact:
        current_eseries_api_url: "{{ eseries_api_url }}"
        current_eseries_api_is_proxy: "{{ about['json']['runningAsProxy'] }}"
  rescue:
    - name: Collect storage system facts
      uri:
        url: "{{ item | regex_replace('v2', 'utils/about') }}"
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
        validate_certs: false
      ignore_errors: true
      register: about_results
      loop: "{{ lookup('list', eseries_api_url_backup_list) }}"
    - name: Determine the first successful Web Services REST API url.
      set_fact:
        first_valid_url: |-
          {%- set valid_urls = [] %}
          {%- for result in about_results["results"] %}
            {%- if not result["failed"] and valid_urls.append(result) %}{%- endif %}
          {%- endfor %}
          {{ valid_urls[0] }}
    - name: Update Web Services REST API information.
      set_fact:
        current_eseries_api_url: "{{ first_valid_url['item'] }}"
        current_eseries_api_is_proxy: "{{ first_valid_url['json']['runningAsProxy'] }}"

    - name: Update Web Services REST API back url list.
      set_fact:
        eseries_api_url_backup_list: |-
          {%- set urls = [] %}
          {%- set url_info = eseries_api_url | urlsplit %}
          {%- for address in [eseries_management_interfaces["controller_a"][0]["address"] | default(""),
                              eseries_management_interfaces["controller_a"][1]["address"] | default(""),
                              eseries_management_interfaces["controller_b"][0]["address"] | default(""),
                              eseries_management_interfaces["controller_b"][1]["address"] | default("")] %}
            {%- if address != "" and urls.append([url_info["scheme"], "://", address, ":", url_info["port"], url_info["path"]] | join("")) %}{%- endif %}
          {%- endfor %}
          {%- set backup_urls = [] %}
          {%- for url in urls %}
            {%- if url != current_eseries_api_url and backup_urls.append(url) %}{%- endif %}
          {%- endfor %}
          {{ backup_urls }}
  always:
    - name: Check whether current Web Services REST API url has been obtained
      fail:
        msg: Failed to obtain the current Web Services REST API url
      when: current_eseries_api_url == ""
  when: current_eseries_api_url == {}
